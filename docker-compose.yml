version: '3.8'

services:
  # Web instance will run in a separate container and should establish
  # connections to Celery, Redis and the backend DB while running.
  web-django:
    build:
      context: ./
      dockerfile: ./compose/local/django/Dockerfile

    image: web_mastf_django
    command: /start
    volumes:
      - .:/app
      - static_volume:/app/mastf/static/
      - storage_data:/app_storage
    expose:
      - 8000
    env_file:
      # This environment file will store all necessary information to
      # be able run the web instance. Note that this file may contain
      # the secret key for Django and locations for SSL certificates.
      #
      # If you're running PostgreSQL, make sure to include necessary
      # environment variables to access the database.
      - ./.env/.dev-example

    depends_on:
      - redis
      - backend-db

    networks:
      - frontend
      - backend


  # The backend database will be used to store all relevant data. There
  # should be only one backend-db container running as it would result
  # in data inconsistencies.
  backend-db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=mastf_django
      - POSTGRES_PASSWORD=supersecretpassword
      - POSTGRES_DB=mastf_backend_db
    networks:
      - backend

  redis:
    image: redis:7-alpine
    networks:
      - backend

  # Task scheduler and queueing system will run in a separate container
  # that includes special files.
  celery_worker:
    build:
      context: ./
      dockerfile: ./compose/local/django/Dockerfile

    image: mastf_celery_worker
    command: /start_celery_worker
    volumes:
      # In order to include additional scanner files and librares, we
      # have to include the whole app directory.
      - .:/app
      - static_volume:/app/mastf/static/
      - storage_data:/app_storage
    env_file:
      # This container needs the same configuration files as defined in
      # out web instance.
      - ./.env/.dev-example

    depends_on:
      - redis
      - backend-db

    networks:
      - backend


  # TODO: register possible tasks
  # This container is optional and can be used to register scheduled tasks
  # that execute whithin a specific timeframe.
  celery_beat:
    build:
      context: ./
      dockerfile: ./compose/local/django/Dockerfile

    image: mastf_celery_beat
    command: /start_celery_beat
    volumes:
      # Same as above
      - .:/app
      - static_volume:/app/mastf/static/
      - storage_data:/app_storage
    env_file:
      # Same as above
      - ./.env/.dev-example

    depends_on:
      - redis
      - backend-db

    networks:
      - backend

  # Our reverse proxy for handling requests and serving static files
  nginx:
    build: ./compose/local/nginx/
    ports:
      - 8080:80
      - 8443:443
    env_file:
      - ./.env/.dev-example
    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: ".conf"
    volumes:
      - static_volume:/app/mastf/static/
    depends_on:
      - web-django
    networks:
      - frontend

volumes:
  postgres_data: {}
  static_volume: {}
  storage_data: {}

networks:
  frontend:
  backend:
